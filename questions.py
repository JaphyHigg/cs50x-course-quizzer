week0 = [
[{"question" : "What is binary?",
  "answer" : "Binary is the base-2 numeral system that forms the foundation of computing. It uses only two digits, 0 and 1, to represent any number and encode data. Each digit in binary is called a 'bit', the smallest unit of data in computing, which can either be off (0) or on (1). This system is used because it directly maps to the on and off states of a computer's transistors."}],
[{"question" : "What is a bit?",
  "answer" : "A bit is a 0 (off) or a 1 (on) on a computer. The term comes from binary digit. Computers are made of transistors that are being turned on and off in huge quantities, which represent all types of data."}],
[{"question" : "What is a byte?",
  "answer" : "A byte is 8 bits."}],
[{"question" : "What is ASCII?",
  "answer" : "ASCII (American Standard Code for Information Interchange) is a character encoding standard that was created to map specific letters to specific numbers, so they could be represented on computers. Each character is represented by a number between 0 and 127. For example 'A' is 65 and 'a' is 97."}],
[{"question" : "What is Unicode?",
  "answer" : "Unicode is a computing industry standard designed to encode characters used in written languages around the world. It allows for the use of over a million unique characters (far beyond ASCII's 128). Unicode includes emoji, symbols, and most languages. Unicode is maintained by the Unicode Consortium non-profit organization."}],
[{"question" : "What is RGB?",
  "answer" : "RGB stands for red, green, blue. It is a combination of three numbers used to represent color in computers. RGB values typically range from 0 to 255, and these numbers determine the intensity of the colors red, green, and blue that mix to create a broad spectrum of colors."}],
[{"question" : "What is pseudocode?",
  "answer" : "Pseudocode is human-readable version of your code. It is often written before coding to help you think through the logic of the problems you'll be solving."}],
[{"question" : "What is Scratch?",
  "answer" : "A visual programming language developed by MIT. Aimed at younger audiences or beginners, Scratch aims to help them learn programming concepts through interactive and visual blocks."}],
[{"question" : "What is a conditional?",
  "answer" : "Conditionals are an essential building block of programming, where the program looks to see if a specific condition has been met. If a condition is met, the program does something."}],
[{"question" : "What is an algorithm?",
  "answer" : "An algorithm in computer science is a set of step-by-step instructions or rules to solve a particular problem or accomplish a specific task. It's like a recipe in cooking, providing a detailed guide to reach the desired outcome. Algorithms can be expressed in many forms, including natural languages, pseudocode, flowcharts, and programming languages."}],
[{"question" : "What is the difference between a high-level language and a low-level language?",
  "answer" : "High-level languages are programming languages that are more user-friendly, easier to write, and provide higher abstraction from machine language. They are designed to be more understandable by humans and are closer to natural language.\n\nLow-level languages are closer to the hardware and provide less abstraction from the machine code. They are harder to read and write as they involve more detailed instructions."}]
]

week1 = [
[{"question" : "What is a compiler?",
  "answer" : "A compiler is a piece of software that takes a particular programming language's program code (source code) and turns it into object code (aka machine language, machine code) that a computer's processor uses."}],
[{"question" : "What are 3 axes that code can be evaluated on?",
  "answer" : "1) Correctness - does the code run as intended?\n2) Design - how well is the code designed?\n3) Style - how aesthetically pleasing and consistent is the code?"}],
[{"question" : "How do you run a program in C?",
  "answer" : "1) 'make filename' compiles the code\n2) './filename' runs the code\n[You do not need to include the file extension '.c']"}],
[{"question" : "[C] - What is the syntax for telling your complier you are using something from another file?",
  "answer" : "Put '#include <headerfile.h>' at the top of your file.\nEx: #include <stdio.h>"}],
[{"question" : "[C] - What are 3 basic loop types?",
    "answer" : "1) while\n2) for\n3) do ... while"}],
[{"question" : "[C] - What are 3 different ways I can increment/decrement a variable by 1?",
    "answer" : "1) variable = variable + 1\n2) variable += 1\n3) variable++\n[Replace + with - for decrement]"}], 
[{"question" : "[C] - How do you print the main types of variables in CS50x?",
  "answer" : "Using a the printf function and a placeholder known as a format code.\nEx: printf('%s\\n', string_variable)\nString: %s\nInteger: %d\nLong Integer: %li\nFloat: %f\nDouble: %lf\nChar: %c"}],
[{"question" : "[C] - What is a char?",
  "answer" : "A char is a variable that contains a single character. A char occupies 1 byte of memory. Char can be signed or unsigned, which means it can either range from -128 to 127 (signed char) or from 0 to 255 (unsigned char). When using char with letters, make sure to use single quotes around single letters."}],
[{"question" : "[C] - How do you create and/or initialize a variable?",
  "answer" : "You must first write what data type of variable, and then name it.\nEx: int number;    or    int number, sum;\nThe above examples would create an int variable name number, or two int variables names number and sum.\nYou can create and initialize a variable at the same time.\nEx: int number = 0;"}],
[{"question" : "What is abstraction?",
  "answer" : "Abstraction is the art of simplifying our code such that it deals with smaller and smaller problems. This helps in reducing complexity by hiding details."}],
[{"question" : "What is truncation?",
  "answer" : "Truncation refers to reducing the number digits right of the decimal point. One way this occurs is when you divide integers and the result is not a whole number. Integers cannot have decimals, so whatever would follow the whole number gets cut off (aka truncated) instead of being rounded up or down."}],
[{"question" : "What are 7 common command line commands (aka shell commands) and what do they do?",
  "answer" : "cd: changes our current directory\ncp: copies files and directories\nls: listing files in a directory\nmkdir: make a directory\nmv: move (or rename) files and directories\nrm: remove (delete) files\nrmdir: remove (delete) directories"}],
[{"question" : "[C] - Explain the syntax and convention around comments.",
  "answer" : "The syntax is to write // before your comment.\nConventions in C would be to always leave a space after //, start your comment with a capital letter, leave comments above each function explaining what they do, leave a comment at the start of your file (above any #include) that explains what your program does."}],
[{"question" : "[C] - What are the common data types used in this course?",
  "answer" : "bool: a Boolean expression of either true or false\nchar: a single character like a or 2\nfloat: a floating-point value, or real number with a decimal value\ndouble: a floating-point value with more digits than a float\nint: integers up to a certain size (4,294,967,295) or number of bits\nlong: integers with more bits, so they can count higher than an int\nstring: a string of characters"}],
[{"question" : "What is integer overflow?",
  "answer" : "Integer overflow is a condition that occurs when the result of an arithmetic operation, such as addition or multiplication, exceeds the maximum size that can be stored by the data type of the integer. For example, if you're using an 8-bit unsigned integer, the maximum value it can hold is 255. If you try to store 256 in it, it will overflow and wrap around to 0. This can lead to unexpected behavior in programs if not properly handled."}],
[{"question" : "What is floating point imprecision?",
  "answer" : "Floating point imprecision refers to the fact that some numbers cannot be represented exactly in binary floating point, which is the format computers use to handle decimal numbers. This can lead to small rounding errors. For example, the decimal number 0.1 cannot be represented exactly as a base 2 fraction, resulting in a small error when it's stored as a floating point number. This is why you might see strange results when comparing floating point numbers for equality."}],
[{"question" : "[C] - How much memory is available to an integer?",
  "answer" : "A integer is typically 4 bytes aka 32 bits. A 4-byte integer can store values from -2,147,483,648 to 2,147,483,647 or from 0 to 4,292,967,295."}],
[{"question" : "[C] - What does the main function represent?",
  "answer" : "The main function is the entry point of the program; when you run a C program, execution starts from the main function. The main function must return an int and take either no arguments or two arguments representing the number and values of command-line arguments."}],
[{"question" : "[C] - What is the difference between a for loop and a while loop?",
  "answer" : "A while loop runs until a set condition changes; it has only one part: the condition. A for loop has 3 parts: initialization, condition, and increment/decrement. You typically would use a for loop when you know how many times you want the loop to run."}],
[{"question" : "[C] - By style convention, where should your main function be located?",
  "answer" : "At the top of your file, below any #include and function prototypes."}],
[{"question" : "[C] - What is a double? How much memory can it use?",
  "answer" : "A double in C is a data type that is used to store decimal numbers (real numbers), where the precision is typically double that of a float. It can represent very large (or very small) numbers. The exact amount of memory a double uses can vary, but in most systems, it's 8 bytes (64 bits). This allows it to have a larger range and greater precision than a float."}],
[{"question" : "[C] - What do you need to do if you define a function but your main function calls it before the definition appears in your code?",
  "answer" : "You need to copy the first line of your function (the output + name + arguments) and paste it at the top of your file, below any #include but above the main function. These are called function prototypes or function declarations.\n\nThis is necessary because in C the file is read top to bottom, and the compiler will try to run your function before it knows what it is."}],
[{"question" : "[C] - If you have a switch statement conditional, what happens if you don't 'break;' at the end of a case?",
  "answer" : "You will continue ('fall through') to the next case side-effect. This can be useful in some cases, but can lead to unexpected behavior if not used intentionally."}],
[{"question" : "What is a ternary operator?",
  "answer" : "A conditional format used for writing trivially small conditionals. Also known as '?:'.\nEx: int x = (expression) ? 5 : 6;\nThe above conditional is a shorter way to write\nint x;\nif (expression)\n{\nx = 5;\n}\nelse\n{\nx = 6;\n}"}]
  ]

week2 = [
[{"question" : "[C] - Beyond allowing you to run your program with './filename' what does the terminal command 'make' do?",
  "answer" : "'make' is running a compiler named clang (or c-lang) for you. By default, using clang will output your compiled code as './a.out' instead of './filename'. What 'make filename' does is run 'clang -o output_filename filename.c' for you. However, if you are including/using a third party library (like <cs50.h>), the terminal command clang needs to be given an additional command line argument to tell the compiled you are using that library. For '#include <cs50.h>' in your file, you would add '-lcs50' (the l is for link or library, then the name of the library). Ex: 'clang -o output_filename filename.c -lcs50'. The 'make' command does all that for you."}],
[{"question" : "[C] - Compiling (with clang) is just one of 4 steps in turning source code in to machine code; what are the 4 steps, in order?",
  "answer" : "1) preprocessing: looks at all the '#include' lines (and a few others), and 'converts' them into all the needed function prototypes referenced in your file\n2) compiling: used as a catch-all phrase for this entire process, but specifically means it takes your code and 'compiles' it in to assembly language\n3) assembling: takes the assembly code and converts it in to machine language (aka binary: 0s and 1s)\n4) linking: takes all the machine language from all files involved (your file + the files referenced as headers) and combines them together in an intelligent way"}],
[{"question" : "What is reverse engineering?",
  "answer" : "Taking machine code (0s and 1s), and de-compiling it to understand what the assembly code or source code was. This is generally a process of interpretation and analysis, not just a straight conversion."}],
[{"question" : "What does it mean to debug? What is a debugger?",
  "answer" : "To debug is to eliminate mistakes in a computers code (bugs). A debugger is a tool (program) that allows you to 'step through' and 'step in' your program to understand what your program is doing exactly at each line. In C, the debugger needs your code to be compiled in order use - it will not help with syntax errors, but it will help with programmatic/logical errors once your code is running."}],
[{"question" : "What is a breakpoint?",
  "answer" : "Used by debuggers, a breakpoint is a (or multiple) location/line in your code that you've picked for the debugger to break/pause while executing your file. Set your breakpoint in your IDE by clicking just to the left of the line number; a mark will appear there. "}],
[{"question" : "[C] - What is an array?",
  "answer" : "An array is a data structure that is made if a sequence of values, back to back to back in memory. A chunk of memory with no gaps, no fragmentation. In C, the length of the array must be set at compile time, or managed dynamically with pointers."}],
[{"question" : "[C] - What is a string?",
  "answer" : "An array of chars. They are 'null terminated', which means they have a char of '\\0' set as the last index of the array, which is a byte of all 0s (aka eight 0 bits, aka NUL), and signals to the computer that that is the end of the string."}],
[{"question" : "[C] - What happens if you are trying to printf a char thats a letter, but you use the %i format code/specifier instead of %c?",
  "answer" : "The printf function will interpret the characters byte value as an integer, putting the ASCII number value of the char instead of the letter into the format code/specifier placeholder. For example, if the character is 'A' and you used %i instead of %c, printf would replace %i with '65', the ASCII value of 'A'."}],
[{"question" : "[C] - How do you access individual elements of an array?",
  "answer" : "Use the syntax 'array[index_number]' where array is the name of the array, and index_number is the zero-based location (index) in the array you'd like to get the value of. For example, if you have an array declared as 'char array[] = {'A', 'B', 'C'}', to access 'B' you would write 'array[1]'.}"}],
[{"question" : "[C] - What is the difference between a string and a character array?",
  "answer" : "A string is always null terminated, while a char array may or may not be. Both are a sequence of chars that are stored consecutively in memory. Without the null termination, functions that process strings may not work on a char array as the function will not know where the array ends."}],
[{"question" : "[C] - How do you declare and initialize an array?",
  "answer" : "datatype array_name[array_size]\nFor example: int grades[3] = {88, 73, 95}; would declare an array named grades which will hold integers and have a length of 3. It has been initialized to have values at 88, 73, and 95 at grades[0], grades[1], and grades[2]."}],
[{"question" : "[C] - What is the difference between a 1D and a 2D array?",
  "answer" : "A 1D (aka one-dimensional) array is an array that has a collection of element accessed by a single index (array_name[n]). A 2D (aka two-dimensional) array is an array of arrays (or a matrix), and requires two indices to access an element (array_name[n][i])."}],
[{"question" : "[C] - How do you declare and initialize a 2D array?",
  "answer" : "To create a 2D array, declare the data type and name, and put the size for both dimensions in square brackets. To initialize a 2D array, follow the definition with initial values for each element enclosed in nested curly braces.\nFor example: int numbers[2][3] = {{1, 2, 3}, {4, 5, 6}}"}],
[{"question" : "What's a helper function?",
  "answer" : "A small function designed to do a specific task and be used by other functions. Using helper functions helps break your problem down in to smaller, manageable pieces, and enhances readability and maintainability of your code."}],
[{"question" : "[C] - How can I convert a string to all uppercase, or all lowercase?",
  "answer" : "By including the <ctype.h> library, and using the toupper(string[index]) or tolower(string[index]) function on each character of the string, while looping through it. You cannot use toupper() or tolower() to convert the entire string at once. Alternatively, for English letters you could take the character you'd like to convert and either subtract 32 to go from lower to upper, or add 32 for upper to lower. This method is using the ASCII values of the characters."}],
[{"question" : "[C] - How does C handle array out-of-bounds access?",
  "answer" : "In C, array out of bound access is not checked or handled automatically. If you try to access or modify an element outside the designated bounds of the array, it results in undefined behavior. This could lead to runtime errors, data corruption, program crashes, or other unpredictable issues."}],
[{"question" : "[C] - What is command-line argument?",
  "answer" : "Command-line arguments are parameters provided to the program when it is invoked from the command line. These arguments are accessible in the program through argc and argv in the main function, allowing the program to react based on user input from the terminal."}],
[{"question" : "[C] - In your main function, what can you replace void with in 'int main(void)'?'",
  "answer" : "'int argc, string argv[]' can be used instead of void.\n'argc' stands for argument count - how many strings does the human type at the prompt. This allows you to do error checks, for example: 'if argc == 2' { do something; } else { handle error; }'. 'argv' stands for argument vector, which is another name for an array. 'string argv[]' means an array of strings. String comes with the <cs50.h> library and is not inherently part of standard C. If not using <cs50.h> or some other library that defines 'string', you would use 'char *argv[]', which mean an array of character pointers, each pointing to a string."}],
[{"question" : "[C] - What happens if you try to access an index of argv that doesn't exist?",
  "answer" : "Trying to access an index of argv that doesn't exist will lead to undefined behavior. In some cases you will get a value of '(null)' (but this is not something you should rely on happening), some cases you will get an unpredictable result, and in other cases your program may crash."}],
[{"question" : "[C] - When accessing the index of an array, can you use negative values? As in array_name[-1], perhaps attempting to get the last value in the array.",
  "answer" : "In C, using negative index numbers is not valid and leads to undefined behavior."}]
]

week3 = [
[{"question" : "...",
  "answer" : "..."}],
]